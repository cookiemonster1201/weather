{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\nexport const fetchWeatherAction = createAsyncThunk(\"weather/fetchWeather\", async (payload, _ref) => {\n  let {\n    rejectWithValue,\n    getState,\n    dispatch\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await axios.get(`/weather?q=${payload}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n    return data;\n  } catch (error) {\n    var _error$response;\n\n    if (!(error !== null && error !== void 0 && error.response)) {\n      throw error;\n    }\n\n    return rejectWithValue(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  }\n});\nconst weatherSlices = createSlice({\n  name: \"weather\",\n  initialState: {\n    weather: null,\n    loading: false,\n    error: null\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherAction.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchWeatherAction.fulfilled, (state, action) => {\n      state.weather = action === null || action === void 0 ? void 0 : action.payload;\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(fetchWeatherAction.rejected, (state, action) => {\n      state.error = action === null || action === void 0 ? void 0 : action.payload;\n      state.loading = false;\n    });\n  }\n});\nexport default weatherSlices.reducer;","map":{"version":3,"sources":["/Users/alenamikituk/Documents/IT/weather/src/redux/slices/weatherSlice.js"],"names":["createAsyncThunk","createSlice","axios","defaults","baseURL","fetchWeatherAction","payload","rejectWithValue","getState","dispatch","data","get","error","response","weatherSlices","name","initialState","weather","loading","extraReducers","builder","addCase","pending","state","action","fulfilled","rejected","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,yCAAzB;AAEA,OAAO,MAAMC,kBAAkB,GAAGL,gBAAgB,CAChD,sBADgD,EAE9C,OAAOM,OAAP,WAA4D;AAAA,MAA5C;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,GAA4C;;AAC1D,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,GAAN,CAAW,cAAaL,OAAQ,wDAAhC,CAAvB;AACA,WAAOI,IAAP;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc;AAAA;;AAChB,QAAI,EAACA,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEC,QAAR,CAAJ,EAAsB;AACpB,YAAMD,KAAN;AACD;;AACD,WAAOL,eAAe,CAACK,KAAD,aAACA,KAAD,0CAACA,KAAK,CAAEC,QAAR,oDAAC,gBAAiBH,IAAlB,CAAtB;AACD;AACF,CAZ+C,CAA3C;AAgBP,MAAMI,aAAa,GAAGb,WAAW,CAAC;AAChCc,EAAAA,IAAI,EAAE,SAD0B;AAE9BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,OAAO,EAAC,IAAV;AAAeC,IAAAA,OAAO,EAAC,KAAvB;AAA6BN,IAAAA,KAAK,EAAC;AAAnC,GAFgB;AAGhCO,EAAAA,aAAa,EAAEC,OAAO,IAAI;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,kBAAkB,CAACiB,OAAnC,EAA4C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7DD,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAE,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,kBAAkB,CAACoB,SAAnC,EAA8C,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC/DD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAhB,aAAgBA,MAAhB,uBAAgBA,MAAM,CAAElB,OAAxB;AACAiB,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACX,KAAN,GAAc,IAAd;AACD,KAJD;AAKAQ,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,kBAAkB,CAACqB,QAAnC,EAA6C,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9DD,MAAAA,KAAK,CAACX,KAAN,GAAcY,MAAd,aAAcA,MAAd,uBAAcA,MAAM,CAAElB,OAAtB;AACAiB,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AAhB+B,CAAD,CAAjC;AAmBA,eAAeJ,aAAa,CAACa,OAA7B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\nexport const fetchWeatherAction = createAsyncThunk(\n  \"weather/fetchWeather\",\n    async (payload, { rejectWithValue, getState, dispatch }) => {\n      try {\n          const { data } = await axios.get(`/weather?q=${payload}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n          return data;\n      } catch (error) {\n      if (!error?.response) {\n        throw error;\n      }\n      return rejectWithValue(error?.response?.data);\n    }\n  }\n);\n\n\nconst weatherSlices = createSlice({\n  name: \"weather\",\n    initialState: { weather:null,loading:false,error:null },\n  extraReducers: builder => {\n    builder.addCase(fetchWeatherAction.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchWeatherAction.fulfilled, (state, action) => {\n      state.weather = action?.payload;\n      state.loading = false;\n      state.error = null;\n    });\n    builder.addCase(fetchWeatherAction.rejected, (state, action) => {\n      state.error = action?.payload;\n      state.loading = false;\n    });\n  },\n});\n\nexport default weatherSlices.reducer;"]},"metadata":{},"sourceType":"module"}