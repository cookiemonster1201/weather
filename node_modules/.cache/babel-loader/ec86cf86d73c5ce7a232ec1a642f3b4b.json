{"ast":null,"code":"var _jsxFileName = \"/Users/alenamikituk/Documents/IT/weather/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fetchWeatherAction } from '../redux/slices/weatherSlice';\nimport { getSearchedWeather } from '../redux/weather/weatherSelectors';\nimport { getCountries } from '../redux/countries/countriesSelectors';\nimport { addCountry, removeCountry } from '../redux/slices/countriesSlice';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MainPage() {\n  _s();\n\n  const dispatch = useDispatch();\n  const searchCountry = useSelector(getSearchedWeather);\n  const countries = useSelector(getCountries);\n  const [city, setCity] = useState('');\n  const [cities, setCities] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onHandleChange = e => {\n    setCity(e.target.value);\n  };\n\n  const onHandleSearch = () => {\n    dispatch(fetchWeatherAction(city));\n    setCity('');\n  };\n\n  useEffect(() => {\n    // const newCities = [];\n    // for (let i = 0; i < countries.length; i++) {\n    //   cities.forEach(city => {\n    //     if (city.name === countries[i]) {\n    //       newCities.push(city)\n    //     }\n    //   })\n    // }\n    // setCities(newCities)\n    countries === null || countries === void 0 ? void 0 : countries.forEach(country => {\n      axios.get(`/weather?q=${country}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`).then(_ref => {\n        let {\n          data\n        } = _ref;\n        setCities(pr => {\n          console.log('pr', pr);\n\n          if (pr && pr !== null && pr !== void 0 && pr.find(c => c.name === country)) {\n            return pr;\n          }\n\n          console.log('lllll');\n          return [...pr, data];\n        });\n      });\n    });\n    console.log('cities', cities);\n  }, [countries]);\n\n  async function updateCity(_ref2) {\n    let {\n      lat,\n      lon,\n      name\n    } = _ref2;\n    const {\n      data\n    } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n    setCities(prev => {\n      return prev.map(city => {\n        if (city.name === name) {\n          return data;\n        } else {\n          return city;\n        }\n      });\n    });\n  }\n\n  const {\n    weather,\n    loading\n  } = searchCountry;\n  const sortedCities = [];\n  countries.forEach(c => {\n    sortedCities.push(cities.find(_ref3 => {\n      let {\n        name\n      } = _ref3;\n      return name === c;\n    }));\n    console.log('sortedCities', sortedCities, cities.find(_ref4 => {\n      let {\n        name\n      } = _ref4;\n      return name === c;\n    }));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Enter city\",\n      value: city,\n      onChange: onHandleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onHandleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), weather ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '0 auto',\n        background: 'grey',\n        width: '150px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.dt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(addCountry(weather.name)),\n        children: \"add to your countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"make a search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your favourites countries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), sortedCities.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        margin: '0 auto'\n      },\n      children: sortedCities.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          border: '1px solid black',\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: c.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 87\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: c.dt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/details/${c.name}`,\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch(removeCountry(c.name)),\n          children: \"remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateCity({\n            lon: c.coord.lon,\n            lat: c.coord.lat,\n            name: c.name\n          }),\n          children: \"update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 19\n        }, this)]\n      }, uuidv4(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"No favourites HERE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MainPage, \"wXH9D7oNP3OteULR/WA7LigphsY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/Users/alenamikituk/Documents/IT/weather/src/pages/MainPage.js"],"names":["React","useState","useEffect","Link","Route","Routes","useDispatch","useSelector","v4","uuidv4","fetchWeatherAction","getSearchedWeather","getCountries","addCountry","removeCountry","axios","MainPage","dispatch","searchCountry","countries","city","setCity","cities","setCities","isLoading","setIsLoading","onHandleChange","e","target","value","onHandleSearch","forEach","country","get","then","data","pr","console","log","find","c","name","updateCity","lat","lon","prev","map","weather","loading","sortedCities","push","margin","background","width","id","dt","length","display","flexWrap","border","cursor","coord"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fetchWeatherAction } from '../redux/slices/weatherSlice';\nimport { getSearchedWeather } from '../redux/weather/weatherSelectors';\nimport { getCountries } from '../redux/countries/countriesSelectors';\nimport { addCountry,removeCountry } from '../redux/slices/countriesSlice';\nimport axios from 'axios';\n\n\nexport default function MainPage() {\n    const dispatch = useDispatch();\n    const searchCountry = useSelector(getSearchedWeather)\n    const countries = useSelector(getCountries);\n    const [city, setCity] = useState('');\n    const [cities, setCities] = useState([]);\n    const [isLoading, setIsLoading] = useState(false)\n\n    const onHandleChange = (e) => {\n      setCity(e.target.value)\n    }\n\n    const onHandleSearch = () => {\n      dispatch(fetchWeatherAction(city))\n      setCity('')\n    }\n\n    useEffect(() => {\n      // const newCities = [];\n      // for (let i = 0; i < countries.length; i++) {\n      //   cities.forEach(city => {\n      //     if (city.name === countries[i]) {\n      //       newCities.push(city)\n      //     }\n      //   })\n      // }\n\n      // setCities(newCities)\n      \n      countries?.forEach((country) => {\n          axios.get(`/weather?q=${country}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`).then(({data}) => {\n            setCities(pr => {\n              console.log('pr', pr)\n              if (pr && pr?.find(c => c.name === country)) {\n                return pr\n              }\n              console.log('lllll')\n            return [...pr, data]\n          });\n      })\n    })\n    console.log('cities', cities)\n    }, [countries]);\n\n    async function updateCity({lat, lon, name}) {\n      const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n      setCities(prev => {\n        return prev.map(city => {\n          if (city.name === name) {\n            return data;\n          } else {\n            return city;\n          }\n        })\n      })\n    }\n\n    const { weather, loading } = searchCountry;\n\n    const sortedCities = [];\n    countries.forEach(c => {\n      sortedCities.push(cities.find(({name}) => name === c))\n      console.log('sortedCities', sortedCities, cities.find(({name}) => name === c))\n\n    }) \n      return (\n          <>\n            <h1>\n          Hello world\n            </h1>\n            <input placeholder='Enter city' value={city} onChange={onHandleChange} />\n        <button onClick={onHandleSearch}>Search</button>\n          {weather ? (\n        <div style={{margin:'0 auto', background:'grey', width:'150px'}}>\n          <p>{weather.name}</p>\n          <p>{weather.id}</p>\n          <p>{weather.dt}</p>\n          <button onClick={()=>dispatch(addCountry(weather.name))}>add to your countries</button>\n        </div>\n      ) :\n        (<h2>make a search</h2>)}\n      <h3>Your favourites countries</h3>\n      {sortedCities.length > 0 ? (\n        <ul style={{display:'flex', flexWrap:'wrap', margin:'0 auto'}}>\n          {sortedCities.map((c) => (\n            <li style={{ border: '1px solid black',cursor:'pointer' }} key={uuidv4()}><p>{c.name}</p>\n                  <p>{c.dt}</p>\n                  <div>\n                      <Link to={`/details/${c.name}`}>Details</Link>\n                  </div>\n                  <button onClick={() => dispatch(removeCountry(c.name))}>remove</button>\n                  <button onClick={() => updateCity({ lon: c.coord.lon, lat: c.coord.lat, name: c.name })\n                  }>update</button>\n            </li>))}\n      </ul>\n          ):(<h4>No favourites HERE</h4>)}\n</>)\n}\n"]},"metadata":{},"sourceType":"module"}