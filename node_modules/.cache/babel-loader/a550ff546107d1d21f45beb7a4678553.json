{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { getCountries } from \"../countries/countriesSelectors\"; // axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n// const updateElById = (arr, idx, updateData) => arr.map((item, id, arr) => arr.indexOf(item) === idx ? updateData : item)\n\nconst deleteCity = (arr, name) => {\n  console.log(arr, name);\n  return arr.filter(el => name !== el);\n}; // export const updateWeatherAction = createAsyncThunk(\n//   \"weather/updateWeather\",\n//     async (payload, { rejectWithValue, getState, dispatch }) => {\n//         const { lat, lon, idx } = payload;\n//         try {\n//           const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n//           return {data, idx}\n//       } catch (error) {\n//       if (!error?.response) {\n//         throw error;\n//       }\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\n\nconst countriesSlice = createSlice({\n  name: 'countries',\n  initialState: {\n    arr: [],\n    error: null,\n    loading: false\n  },\n  reducers: {\n    addCountry: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.arr = !state.arr.includes(payload) ? [...state.arr, payload] : state.arr;\n    },\n    removeCountry: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.arr = [...deleteCity(state.arr, payload)];\n    } // updateCountry: (state, {payload}) => {state.arr = updateElById(state.arr, payload.idx, payload.data)}\n\n  },\n  extraReducers: {// [updateWeatherAction.pending]: (state, action) => {\n    //   state.loading = true;\n    //   },\n    // [updateWeatherAction.fulfilled]: (state, { payload }) => {\n    //   state.arr = updateElById(state.arr, payload.idx, payload.data)\n    //   },\n    //     .addCase(updateWeatherAction.fulfilled, (state, {payload}) => {\n    //             state.loading = false,\n    //             state.error = null\n    //         }\n    // )\n    //     .addCase(updateWeatherAction.fulfilled, (state, action) => {\n    //         const findIndex = state.arr.reduce((acc, country, index) => \n    //             if (country.name === action.payload.name) {\n    //                 return acc += index\n    //             }\n    //             return acc;\n    //         }, 0)\n    //         return {\n    //             state.arr[findIndex] = action.payload,\n    //             state.loading = false,\n    //             state.error = null\n    //         }\n    //     }\n    // )\n    // [updateWeatherAction.rejected]: (state, action) => {\n    //     state.error = action?.payload;\n    //     state.loading = false;\n    //     }\n  }\n});\nexport const {\n  addCountry,\n  removeCountry\n} = countriesSlice.actions;\nexport default countriesSlice.reducer;","map":{"version":3,"sources":["/Users/alenamikituk/Documents/IT/weather/src/redux/slices/countriesSlice.js"],"names":["createAsyncThunk","createSlice","axios","useSelector","getCountries","deleteCity","arr","name","console","log","filter","el","countriesSlice","initialState","error","loading","reducers","addCountry","state","payload","includes","removeCountry","extraReducers","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,iCAA7B,C,CACA;AAEA;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,IAAjB;AACA,SAAOD,GAAG,CAACI,MAAJ,CAAYC,EAAD,IAAQJ,IAAI,KAAKI,EAA5B,CAAP;AACD,CAHD,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAGX,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,WADyB;AAE/BM,EAAAA,YAAY,EAAE;AACVP,IAAAA,GAAG,EAAE,EADK;AAEVQ,IAAAA,KAAK,EAAE,IAFG;AAGVC,IAAAA,OAAO,EAAC;AAHE,GAFiB;AAO/BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAClCD,MAAAA,KAAK,CAACZ,GAAN,GAAY,CAACY,KAAK,CAACZ,GAAN,CAAUc,QAAV,CAAmBD,OAAnB,CAAD,GAA+B,CAAC,GAAGD,KAAK,CAACZ,GAAV,EAAea,OAAf,CAA/B,GAAyDD,KAAK,CAACZ,GAA3E;AACD,KAHK;AAINe,IAAAA,aAAa,EAAE,CAACH,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACrCD,MAAAA,KAAK,CAACZ,GAAN,GAAY,CAAC,GAAGD,UAAU,CAACa,KAAK,CAACZ,GAAP,EAAYa,OAAZ,CAAd,CAAZ;AACD,KANK,CAON;;AAPM,GAPqB;AAiB/BG,EAAAA,aAAa,EAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BW;AAjBgB,CAAD,CAAlC;AAmDA,OAAO,MAAM;AAAEL,EAAAA,UAAF;AAAaI,EAAAA;AAAb,IAA+BT,cAAc,CAACW,OAApD;AACP,eAAeX,cAAc,CAACY,OAA9B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { getCountries } from \"../countries/countriesSelectors\";\n// axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\n// const updateElById = (arr, idx, updateData) => arr.map((item, id, arr) => arr.indexOf(item) === idx ? updateData : item)\n\nconst deleteCity = (arr, name) => {\n  console.log(arr, name)\n  return arr.filter((el) => name !== el)\n}\n\n// export const updateWeatherAction = createAsyncThunk(\n//   \"weather/updateWeather\",\n//     async (payload, { rejectWithValue, getState, dispatch }) => {\n//         const { lat, lon, idx } = payload;\n//         try {\n//           const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=d0aef4da9ac1a34e09e4ce9ff137ae24&units=imperial`);\n//           return {data, idx}\n//       } catch (error) {\n//       if (!error?.response) {\n//         throw error;\n//       }\n//       return rejectWithValue(error?.response?.data);\n//     }\n//   }\n// );\n\nconst countriesSlice = createSlice({\n    name: 'countries',\n    initialState: {\n        arr: [],\n        error: null,\n        loading:false\n    },\n    reducers: {\n        addCountry: (state, { payload }) => {\n          state.arr = !state.arr.includes(payload) ? [...state.arr, payload] : state.arr\n        },\n        removeCountry: (state, { payload }) => {\n          state.arr = [...deleteCity(state.arr, payload)]\n        },\n        // updateCountry: (state, {payload}) => {state.arr = updateElById(state.arr, payload.idx, payload.data)}\n        \n    },\n    extraReducers: {\n          // [updateWeatherAction.pending]: (state, action) => {\n          //   state.loading = true;\n          //   },\n          // [updateWeatherAction.fulfilled]: (state, { payload }) => {\n          //   state.arr = updateElById(state.arr, payload.idx, payload.data)\n          //   },\n        //     .addCase(updateWeatherAction.fulfilled, (state, {payload}) => {\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        // )\n        //     .addCase(updateWeatherAction.fulfilled, (state, action) => {\n        //         const findIndex = state.arr.reduce((acc, country, index) => \n        //             if (country.name === action.payload.name) {\n        //                 return acc += index\n        //             }\n        //             return acc;\n        //         }, 0)\n        //         return {\n        //             state.arr[findIndex] = action.payload,\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        //     }\n        // )\n        // [updateWeatherAction.rejected]: (state, action) => {\n        //     state.error = action?.payload;\n        //     state.loading = false;\n        //     }\n          }  \n})\n\n\nexport const { addCountry,removeCountry } = countriesSlice.actions;\nexport default countriesSlice.reducer;"]},"metadata":{},"sourceType":"module"}