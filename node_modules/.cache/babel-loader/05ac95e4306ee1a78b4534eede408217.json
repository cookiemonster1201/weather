{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { getCountries } from \"../countries/countriesSelectors\"; // axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\nconst updateElById = (arr, idx, updateData) => arr.map((item, id, arr) => arr.indexOf(item) === idx ? updateData : item);\n\nexport const updateWeatherAction = createAsyncThunk(\"weather/updateWeather\", async (payload, _ref) => {\n  let {\n    rejectWithValue,\n    getState,\n    dispatch\n  } = _ref;\n  const {\n    lat,\n    lon,\n    idx\n  } = payload;\n\n  try {\n    const {\n      data\n    } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=7318f9d16165f2ed696d529c2a4bcc86`);\n    return {\n      data,\n      idx\n    };\n  } catch (error) {\n    var _error$response;\n\n    if (!(error !== null && error !== void 0 && error.response)) {\n      throw error;\n    }\n\n    return rejectWithValue(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  }\n});\nconst countriesSlice = createSlice({\n  name: 'countries',\n  initialState: {\n    arr: [],\n    error: null,\n    loading: false\n  },\n  reducers: {\n    addCountry: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.arr.push(payload);\n    },\n    removeCountry: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.arr = state.arr.filter(c => c.name !== payload);\n    } // updateCountry: (state, {payload}) => {state.arr = updateElById(state.arr, payload.idx, payload.data)}\n\n  },\n  extraReducers: {\n    [updateWeatherAction.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [updateWeatherAction.fulfilled]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.arr = updateElById(state.arr, payload.idx, payload.data);\n    },\n    //     .addCase(updateWeatherAction.fulfilled, (state, {payload}) => {\n    //             state.loading = false,\n    //             state.error = null\n    //         }\n    // )\n    //     .addCase(updateWeatherAction.fulfilled, (state, action) => {\n    //         const findIndex = state.arr.reduce((acc, country, index) => \n    //             if (country.name === action.payload.name) {\n    //                 return acc += index\n    //             }\n    //             return acc;\n    //         }, 0)\n    //         return {\n    //             state.arr[findIndex] = action.payload,\n    //             state.loading = false,\n    //             state.error = null\n    //         }\n    //     }\n    // )\n    [updateWeatherAction.rejected]: (state, action) => {\n      state.error = action === null || action === void 0 ? void 0 : action.payload;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  addCountry,\n  removeCountry\n} = countriesSlice.actions;\nexport default countriesSlice.reducer;","map":{"version":3,"sources":["/Users/alenamikituk/weather/src/redux/slices/countriesSlice.js"],"names":["createAsyncThunk","createSlice","axios","useSelector","getCountries","updateElById","arr","idx","updateData","map","item","id","indexOf","updateWeatherAction","payload","rejectWithValue","getState","dispatch","lat","lon","data","get","error","response","countriesSlice","name","initialState","loading","reducers","addCountry","state","push","removeCountry","filter","c","extraReducers","pending","action","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { getCountries } from \"../countries/countriesSelectors\";\n// axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\nconst updateElById = (arr, idx, updateData) => arr.map((item, id, arr) => arr.indexOf(item) === idx ? updateData : item)\n\nexport const updateWeatherAction = createAsyncThunk(\n  \"weather/updateWeather\",\n    async (payload, { rejectWithValue, getState, dispatch }) => {\n        const { lat, lon, idx } = payload;\n        try {\n          const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=7318f9d16165f2ed696d529c2a4bcc86`);\n          return {data, idx}\n      } catch (error) {\n      if (!error?.response) {\n        throw error;\n      }\n      return rejectWithValue(error?.response?.data);\n    }\n  }\n);\n\nconst countriesSlice = createSlice({\n    name: 'countries',\n    initialState: {\n        arr: [],\n        error: null,\n        loading:false\n    },\n    reducers: {\n        addCountry: (state, { payload }) => {state.arr.push(payload)},\n        removeCountry: (state, { payload }) => { state.arr = state.arr.filter(c => c.name !== payload) },\n        // updateCountry: (state, {payload}) => {state.arr = updateElById(state.arr, payload.idx, payload.data)}\n        \n    },\n    extraReducers: {\n          [updateWeatherAction.pending]: (state, action) => {\n            state.loading = true;\n            },\n          [updateWeatherAction.fulfilled]: (state, { payload }) => {\n            state.arr = updateElById(state.arr, payload.idx, payload.data)\n            },\n        //     .addCase(updateWeatherAction.fulfilled, (state, {payload}) => {\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        // )\n        //     .addCase(updateWeatherAction.fulfilled, (state, action) => {\n        //         const findIndex = state.arr.reduce((acc, country, index) => \n        //             if (country.name === action.payload.name) {\n        //                 return acc += index\n        //             }\n        //             return acc;\n        //         }, 0)\n        //         return {\n        //             state.arr[findIndex] = action.payload,\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        //     }\n        // )\n        [updateWeatherAction.rejected]: (state, action) => {\n            state.error = action?.payload;\n            state.loading = false;\n            }\n          }  \n})\n\n\nexport const { addCountry,removeCountry } = countriesSlice.actions;\nexport default countriesSlice.reducer;"]},"metadata":{},"sourceType":"module"}