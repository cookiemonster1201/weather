[{"/Users/alenamikituk/weather/src/index.js":"1","/Users/alenamikituk/weather/src/App.js":"2","/Users/alenamikituk/weather/src/redux/store.js":"3","/Users/alenamikituk/weather/src/pages/InfoCard.js":"4","/Users/alenamikituk/weather/src/pages/MainPage.js":"5","/Users/alenamikituk/weather/src/redux/countries/countriesSelectors.js":"6","/Users/alenamikituk/weather/src/redux/weather/weatherSelectors.js":"7","/Users/alenamikituk/weather/src/redux/slices/weatherSlice.js":"8","/Users/alenamikituk/weather/src/redux/slices/countriesSlice.js":"9"},{"size":607,"mtime":1650658891479,"results":"10","hashOfConfig":"11"},{"size":396,"mtime":1650795027282,"results":"12","hashOfConfig":"11"},{"size":911,"mtime":1650658891480,"results":"13","hashOfConfig":"11"},{"size":859,"mtime":1650795008853,"results":"14","hashOfConfig":"11"},{"size":3018,"mtime":1650800370893,"results":"15","hashOfConfig":"11"},{"size":57,"mtime":1650658891479,"results":"16","hashOfConfig":"11"},{"size":66,"mtime":1650658891480,"results":"17","hashOfConfig":"11"},{"size":1230,"mtime":1650660192829,"results":"18","hashOfConfig":"11"},{"size":2902,"mtime":1650800687280,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"v7rdi9",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/alenamikituk/weather/src/index.js",[],[],[],"/Users/alenamikituk/weather/src/App.js",[],[],[],"/Users/alenamikituk/weather/src/redux/store.js",[],[],"/Users/alenamikituk/weather/src/pages/InfoCard.js",[],[],"/Users/alenamikituk/weather/src/pages/MainPage.js",["52","53","54"],[],"import React, { useState,useEffect } from 'react';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fetchWeatherAction } from '../redux/slices/weatherSlice';\nimport { getSearchedWeather } from '../redux/weather/weatherSelectors';\nimport { getCountries } from '../redux/countries/countriesSelectors';\nimport { addCountry,removeCountry, updateWeatherAction } from '../redux/slices/countriesSlice';\nimport axios from 'axios';\n\n\nexport default function MainPage() {\n    const dispatch = useDispatch();\n    const searchCountry = useSelector(getSearchedWeather)\n    const countries = useSelector(getCountries);\n    const [city, setCity] = useState('');\n\n    const [cities, setCities] = useState([]);\n\n    const onHandleChange = (e) => {\n      setCity(e.target.value)\n    }\n\n    const onHandleSearch = () => {\n      dispatch(fetchWeatherAction(city))\n      setCity('')\n    }\n\n    console.log('cities', cities)\n\n\n    useEffect(() => {\n      console.log('countries', countries)\n      try {\n      countries.forEach(async (country) => {\n          const { data } = await axios.get(`/weather?q=${country}&appid=7318f9d16165f2ed696d529c2a4bcc86&units=imperial`);\n          setCities(prev => {\n            if (!prev.includes(data)) {\n              return [...prev, data]\n            } else {\n              return prev\n            }\n          })\n          \n      })\n    } catch (error) {\n      console.log('error', error)\n    }\n    }, [countries]);\n\n    const { weather, loading } = searchCountry;\n\n      return (\n          <>\n            <h1>\n          Hello world\n            </h1>\n            <input placeholder='Enter city' value={city} onChange={onHandleChange} />\n        <button onClick={onHandleSearch}>Search</button>\n          {weather ? (\n        <div style={{margin:'0 auto', background:'grey', width:'150px'}}>\n          <p>{weather.name}</p>\n          <p>{weather.id}</p>\n          <p>{weather.dt}</p>\n          <button onClick={()=>dispatch(addCountry(weather.name))}>add to your countries</button>\n        </div>\n      ) :\n        (<h2>make a search</h2>)}\n      <h3>Your favourites countries</h3>\n      {cities.length > 0 ? (\n        <ul style={{display:'flex', flexWrap:'wrap', margin:'0 auto'}}>\n          {cities.map((c,idx) => (\n            <li style={{ border: '1px solid black',cursor:'pointer' }} key={uuidv4()}><p>{c.name}</p>\n              <p>{console.log('c.id', c.id)}</p>\n                  <p>{c.dt}</p>\n                  <div>\n                      <Link to={`/details/${c.name}`}>Details</Link>\n                  </div>\n                  <button onClick={() => dispatch(removeCountry(c.name))}>remove</button>\n                  <button onClick={() => {\n                      dispatch(updateWeatherAction({ lon: c.coord.lon, lat: c.coord.lat, idx: idx }))\n                  }\n                  }>update</button>\n            </li>))}\n      </ul>\n          ):(<h4>No favourites HERE</h4>)}\n</>)\n}\n",[],"/Users/alenamikituk/weather/src/redux/countries/countriesSelectors.js",[],[],"/Users/alenamikituk/weather/src/redux/weather/weatherSelectors.js",[],[],"/Users/alenamikituk/weather/src/redux/slices/weatherSlice.js",[],[],"/Users/alenamikituk/weather/src/redux/slices/countriesSlice.js",["55","56"],[],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { getCountries } from \"../countries/countriesSelectors\";\n// axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\nconst updateElById = (arr, idx, updateData) => arr.map((item, id, arr) => arr.indexOf(item) === idx ? updateData : item)\n\nconst deleteCity = (arr, name) => {\n  return arr.filter((el) => name !== el.name)\n}\n\nexport const updateWeatherAction = createAsyncThunk(\n  \"weather/updateWeather\",\n    async (payload, { rejectWithValue, getState, dispatch }) => {\n        const { lat, lon, idx } = payload;\n        try {\n          const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=7318f9d16165f2ed696d529c2a4bcc86`);\n          return {data, idx}\n      } catch (error) {\n      if (!error?.response) {\n        throw error;\n      }\n      return rejectWithValue(error?.response?.data);\n    }\n  }\n);\n\nconst countriesSlice = createSlice({\n    name: 'countries',\n    initialState: {\n        arr: [],\n        error: null,\n        loading:false\n    },\n    reducers: {\n        addCountry: (state, { payload }) => !state.arr.includes(payload) ? {...state, arr: [...state.arr, payload]} : {state},\n        removeCountry: (state, { payload }) => {\n        state.arr = deleteCity(state.arr, payload) \n        },\n        // updateCountry: (state, {payload}) => {state.arr = updateElById(state.arr, payload.idx, payload.data)}\n        \n    },\n    extraReducers: {\n          [updateWeatherAction.pending]: (state, action) => {\n            state.loading = true;\n            },\n          [updateWeatherAction.fulfilled]: (state, { payload }) => {\n            state.arr = updateElById(state.arr, payload.idx, payload.data)\n            },\n        //     .addCase(updateWeatherAction.fulfilled, (state, {payload}) => {\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        // )\n        //     .addCase(updateWeatherAction.fulfilled, (state, action) => {\n        //         const findIndex = state.arr.reduce((acc, country, index) => \n        //             if (country.name === action.payload.name) {\n        //                 return acc += index\n        //             }\n        //             return acc;\n        //         }, 0)\n        //         return {\n        //             state.arr[findIndex] = action.payload,\n        //             state.loading = false,\n        //             state.error = null\n        //         }\n        //     }\n        // )\n        [updateWeatherAction.rejected]: (state, action) => {\n            state.error = action?.payload;\n            state.loading = false;\n            }\n          }  \n})\n\n\nexport const { addCountry,removeCountry } = countriesSlice.actions;\nexport default countriesSlice.reducer;",{"ruleId":"57","severity":1,"message":"58","line":2,"column":16,"nodeType":"59","messageId":"60","endLine":2,"endColumn":21},{"ruleId":"57","severity":1,"message":"61","line":2,"column":23,"nodeType":"59","messageId":"60","endLine":2,"endColumn":29},{"ruleId":"57","severity":1,"message":"62","line":51,"column":22,"nodeType":"59","messageId":"60","endLine":51,"endColumn":29},{"ruleId":"57","severity":1,"message":"63","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":21},{"ruleId":"57","severity":1,"message":"64","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":22},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","'loading' is assigned a value but never used.","'useSelector' is defined but never used.","'getCountries' is defined but never used."]